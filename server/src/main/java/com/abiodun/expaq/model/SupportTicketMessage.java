package com.abiodun.expaq.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.GenericGenerator;

import java.time.LocalDateTime;
import java.util.UUID;

@Entity
@Table(name = "support_ticket_messages")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SupportTicketMessage {
    
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    @Column(updatable = false, nullable = false)
    private UUID id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "support_ticket_id", nullable = false)
    private SupportTicket supportTicket;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "sender_id", nullable = false)
    private User sender;
    
    @Column(name = "message", columnDefinition = "TEXT", nullable = false)
    private String message;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "message_type", nullable = false)
    private MessageType messageType;
    
    @Column(name = "is_internal", nullable = false)
    private Boolean isInternal = false;
    
    @Column(name = "is_auto_generated", nullable = false)
    private Boolean isAutoGenerated = false;
    
    @Column(name = "read_by_customer", nullable = false)
    private Boolean readByCustomer = false;
    
    @Column(name = "read_by_agent", nullable = false)
    private Boolean readByAgent = false;
    
    @Column(name = "read_at")
    private LocalDateTime readAt;
    
    @Column(name = "created_at", nullable = false)
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
        
        if (messageType == null) {
            messageType = MessageType.REPLY;
        }
    }
    
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
    
    public enum MessageType {
        REPLY("Reply"),
        INTERNAL_NOTE("Internal Note"),
        STATUS_UPDATE("Status Update"),
        AUTO_RESPONSE("Auto Response"),
        ESCALATION_NOTE("Escalation Note"),
        RESOLUTION_NOTE("Resolution Note"),
        CUSTOMER_FEEDBACK("Customer Feedback");
        
        private final String displayName;
        
        MessageType(String displayName) {
            this.displayName = displayName;
        }
        
        public String getDisplayName() {
            return displayName;
        }
    }
    
    // Helper methods
    
    public boolean isFromCustomer() {
        return supportTicket != null && supportTicket.getUser().equals(sender);
    }
    
    public boolean isFromAgent() {
        return !isFromCustomer() && !isAutoGenerated;
    }
    
    public void markAsRead(boolean isCustomer) {
        if (isCustomer) {
            this.readByCustomer = true;
        } else {
            this.readByAgent = true;
        }
        this.readAt = LocalDateTime.now();
    }
    
    public boolean isVisible() {
        return !isInternal || isFromAgent();
    }
}