"use client";

import { useBookingDetails } from "@/hooks/use-bookings";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { ArrowLeft, CreditCard, Lock } from "lucide-react";
import Link from "next/link";
import { useState } from "react";
import Image from "next/image";
import { useToast } from "@/components/ui/use-toast";
import { bookingService, PaymentResponse } from "@/services/booking-service";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useRouter } from "next/navigation";
import axios from "axios";
import Paystack from "@paystack/inline-js";

interface PaymentPageProps {
  bookingId: string;
}

export default function PaymentPage({ bookingId }: PaymentPageProps) {
  const router = useRouter();
  const { data: booking, isLoading } = useBookingDetails(bookingId);
  const [paymentMethod, setPaymentMethod] = useState<
    "card" | "paypal" | "paystack"
  >("card");
  const [isPaymentLoading, setIsPaymentLoading] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Mutation for verifying payment
  const { mutate: verifyPayment } = useMutation({
    mutationFn: async (paymentId: string) => {
      const response = await axios.put(
        `/api/payments/${paymentId}/status?status=COMPLETED`
      );
      return response.data;
    },
    onSuccess: () => {
      toast({
        title: "Payment Verified",
        description: "Your payment has been successfully verified."
      });
      queryClient.invalidateQueries({ queryKey: ["booking", bookingId] });
      // Redirect to booking details page after successful verification
      router.push(`/bookings/${bookingId}`);
    },
    onError: (error: Error) => {
      toast({
        title: "Verification Error",
        description: error.message || "Failed to verify payment",
        variant: "destructive"
      });
    }
  });

  // Use our own mutation for payment
  const { mutate: initiatePayment } = useMutation({
    mutationFn: (paymentProvider: string = "PAYSTACK") => {
      // Only proceed if bookingId is present
      if (!bookingId) {
        throw new Error("Booking ID is required to process payment");
      }
      setIsPaymentLoading(true);
      return bookingService.initiatePayment(bookingId, paymentProvider);
    },
    onSuccess: (data) => {
      // Handle successful payment initialization
      processPayment(data);
      queryClient.invalidateQueries({ queryKey: ["booking", bookingId] });
    },
    onError: (error: Error) => {
      setIsPaymentLoading(false);
      toast({
        title: "Payment Error",
        description: error.message || "Failed to initiate payment",
        variant: "destructive"
      });
    }
  });

  if (isLoading) {
    return (
      <Card className="p-8">
        <div className="space-y-6">
          <Skeleton className="h-8 w-1/3" />
          <Skeleton className="h-32 w-full" />
          <Skeleton className="h-10 w-1/4" />
        </div>
      </Card>
    );
  }

  if (!booking) {
    return (
      <div className="text-center py-8">
        <h3 className="text-xl font-semibold mb-2">Booking not found</h3>
        <p className="text-gray-600 mb-4">
          Unable to process payment for this booking.
        </p>
        <Button asChild>
          <Link href="/bookings">Back to My Bookings</Link>
        </Button>
      </div>
    );
  }

  if (booking.status === "COMPLETED") {
    return (
      <Card className="p-8">
        <div className="text-center">
          <div className="bg-green-50 p-4 rounded-lg mb-6">
            <p className="text-green-700">
              This booking has already been paid for.
            </p>
          </div>
          <Button asChild>
            <Link href={`/bookings/${bookingId}`}>View Booking Details</Link>
          </Button>
        </div>
      </Card>
    );
  }

  // Process payment data from the API
  const processPayment = (paymentData: PaymentResponse) => {
    console.log("Payment data received:", paymentData);

    try {
      // Check if we have debugging enabled
      // const debugPayment = true; // Set to true for debugging payment flow

      // if (debugPayment) {
      //   console.log("Payment Data:", {
      //     provider: paymentData.provider,
      //     accessCode: paymentData.accessCode || paymentData.access_code,
      //     authUrl: paymentData.authorizationUrl,
      //     status: paymentData.status,
      //   });

      //   // Don't actually process payment in debug mode
      //   setIsPaymentLoading(false);
      //   return;
      // }

      if (
        paymentData.provider === "PAYSTACK" &&
        (paymentData.accessCode || paymentData.access_code)
      ) {
        // For Paystack, use the inline-js library with the access code
        try {
          const accessCode =
            paymentData.accessCode || paymentData.access_code || "";
          console.log("Processing Paystack transaction with code:", accessCode);
          
          // Initialize Paystack with callbacks to handle payment status
          const paystack = new Paystack();
          
          // Use the new transaction method with callbacks
          paystack.newTransaction({
            key: process.env.NEXT_PUBLIC_PAYSTACK_KEY || '',
            email: booking?.user?.email || 'customer@example.com',
            amount: booking?.totalPrice ? booking.totalPrice * 100 : 0, // Convert to kobo/cents
            ref: paymentData.paymentIntentId || '',
            onSuccess: (transaction: any) => {
              console.log("Payment successful:", transaction);
              // Verify the payment by calling our API endpoint
              if (paymentData.paymentIntentId) {
                verifyPayment(paymentData.paymentIntentId);
              } else {
                toast({
                  title: "Payment Verification Issue",
                  description: "Payment was successful but couldn't verify with our system."
                });
              }
            },
            onCancel: () => {
              toast({
                title: "Payment Cancelled",
                description: "You cancelled the payment process."
              });
              setIsPaymentLoading(false);
            }
          });

          // The popup will handle redirects/callbacks on completion
          toast({
            title: "Payment Initiated",
            description: "Please complete your payment in the popup window."
          });
        } catch (error) {
          console.error("Paystack popup error:", error);
          // Fallback to authorization URL if popup fails
          if (paymentData.authorizationUrl) {
            window.location.href = paymentData.authorizationUrl;
          } else {
            throw error;
          }
        }
      }
      // Handle Paystack without access code (use authorization URL)
      else if (
        paymentData.provider === "PAYSTACK" &&
        paymentData.authorizationUrl
      ) {
        window.location.href = paymentData.authorizationUrl;
      }
      // Handle other payment providers with URL
      else if (paymentData.authorizationUrl || paymentData.redirectUrl) {
        window.location.href =
          paymentData.authorizationUrl || paymentData.redirectUrl || "";
      } else {
        throw new Error("No payment URL or access code provided");
      }
    } catch (error) {
      console.error("Payment processing error:", error);
      toast({
        title: "Payment Processing Error",
        description:
          "An error occurred while processing your payment. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsPaymentLoading(false);
    }
  };

  const handlePayment = () => {
    // Check if bookingId is present before initiating payment
    if (!bookingId) {
      toast({
        title: "Payment Error",
        description: "Booking ID is missing. Cannot process payment.",
        variant: "destructive"
      });
      return;
    }

    // Initiate payment with selected method
    let provider;

    switch (paymentMethod) {
      case "paypal":
        provider = "PAYPAL";
        break;
      case "paystack":
        provider = "PAYSTACK";
        break;
      case "card":
      default:
        provider = "STRIPE";
        break;
    }

    // Log the request details for debugging
    console.log("Initiating payment with:", {
      bookingId,
      provider,
      url: "/api/payments/initialize",
    });

    toast({
      title: "Initiating Payment",
      description: `Processing your payment using ${provider}...`
    });

    // Pass the provider as a parameter
    initiatePayment(provider);
  };

  return (
    <>
      <div className="mb-6">
        <Button asChild variant="ghost" className="mb-4">
          <Link href={`/bookings/${bookingId}`}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Booking
          </Link>
        </Button>
        <h1 className="text-3xl font-bold">Complete Payment</h1>
      </div>

      <div className="grid gap-6 md:grid-cols-5">
        <Card className="p-6 md:col-span-3">
          <h2 className="text-xl font-semibold mb-6">Payment Method</h2>
          <div className="space-y-4">
            <button
              onClick={() => setPaymentMethod("card")}
              className={`w-full p-4 border rounded-lg text-left flex items-center gap-3 ${
                paymentMethod === "card"
                  ? "border-primary ring-2 ring-primary/10"
                  : ""
              }`}
            >
              <CreditCard className="w-5 h-5" />
              <div className="flex-1">
                <p className="font-medium">Credit or Debit Card</p>
                <p className="text-sm text-gray-500">
                  Pay securely with your card
                </p>
              </div>{" "}
              <div className="flex gap-2 relative h-5 w-20">
                <Image
                  src="/visa.svg"
                  alt="Visa"
                  width={24}
                  height={16}
                  className="mr-1"
                />
                <Image
                  src="/mastercard.svg"
                  alt="Mastercard"
                  width={24}
                  height={16}
                  className="mr-1"
                />
                <Image
                  src="/amex.svg"
                  alt="American Express"
                  width={24}
                  height={16}
                />
              </div>
            </button>

            <button
              onClick={() => setPaymentMethod("paypal")}
              className={`w-full p-4 border rounded-lg text-left flex items-center gap-3 ${
                paymentMethod === "paypal"
                  ? "border-primary ring-2 ring-primary/10"
                  : ""
              }`}
            >
              <div className="h-5 w-20 relative">
                <Image
                  src="/paypal.svg"
                  alt="PayPal"
                  width={60}
                  height={20}
                  className="object-contain"
                />
              </div>
              <div className="flex-1">
                <p className="font-medium">PayPal</p>
                <p className="text-sm text-gray-500">
                  Pay with your PayPal account
                </p>
              </div>
            </button>

            <button
              onClick={() => setPaymentMethod("paystack")}
              className={`w-full p-4 border rounded-lg text-left flex items-center gap-3 ${
                paymentMethod === "paystack"
                  ? "border-primary ring-2 ring-primary/10"
                  : ""
              }`}
            >
              <CreditCard className="w-5 h-5" />
              <div className="flex-1">
                <p className="font-medium">Paystack</p>
                <p className="text-sm text-gray-500">
                  Pay securely with Paystack
                </p>
              </div>
            </button>
          </div>
          <div className="mt-6">
            <Button
              onClick={handlePayment}
              className="w-full"
              size="lg"
              disabled={isPaymentLoading}
            >
              {isPaymentLoading ? (
                "Processing..."
              ) : (
                <>
                  Pay ${booking.totalPrice}
                  <Lock className="w-4 h-4 ml-2" />
                </>
              )}
            </Button>
          </div>{" "}
          <p className="text-center text-sm text-gray-500 mt-4 flex items-center justify-center gap-1">
            <Lock className="w-4 h-4" />
            Secure payment powered by{" "}
            {paymentMethod === "paystack"
              ? "Paystack"
              : paymentMethod === "paypal"
              ? "PayPal"
              : "Stripe"}
          </p>
        </Card>

        <Card className="p-6 md:col-span-2">
          <h2 className="text-xl font-semibold mb-4">Order Summary</h2>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span>Activity Price</span>
              <span>${booking.totalPrice}</span>
            </div>
            <div className="flex justify-between">
              <span>Service Fee</span>
              <span>${Math.round(booking.totalPrice * 0.1)}</span>
            </div>
            <div className="flex justify-between">
              <span>Taxes</span>
              <span>${Math.round(booking.totalPrice * 0.08)}</span>
            </div>
            <div className="pt-3 border-t">
              <div className="flex justify-between font-semibold">
                <span>Total Amount</span>
                <span>${booking.totalPrice}</span>
              </div>
            </div>
          </div>

          <div className="mt-6 space-y-3">
            <h3 className="font-semibold">Booking Details</h3>
            <div className="text-sm text-gray-600 space-y-2">
              <p>Activity: {booking.activityTitle}</p>
              <p>
                Date:{" "}
                {typeof booking.createdAt === "string"
                  ? new Date(booking.createdAt).toLocaleDateString()
                  : "N/A"}
              </p>
              <p>Time: {booking.time}</p>
              <p>Guests: {booking.participants}</p>
            </div>
          </div>
        </Card>
      </div>
    </>
  );
}
