"use client";

import { useAuthStore } from "@/lib/store/auth";
import { useState, useEffect } from "react";
import AccessDenied from "./AccessDenied";

interface ProtectedComponentProps {
  children: React.ReactNode;
  requiredRoles?: string[];
  fallback?: React.ReactNode;
  loginPath?: string;
  homePath?: string;
  customMessages?: {
    unauthorized?: string;
    unauthenticated?: string;
  }
}

/**
 * A component that protects its children from being rendered until 
 * authentication state is confirmed. Shows appropriate access denied
 * information instead of automatic redirects.
 */
export function ProtectedComponent({
  children,
  requiredRoles = [],
  fallback,
  loginPath = '/login',
  homePath = '/',
  customMessages
}: ProtectedComponentProps) {
  const { user, isLoading, hasRole, isAuthenticated } = useAuthStore();
  const [authChecked, setAuthChecked] = useState(false);
  
  // Only run the auth check once
  useEffect(() => {
    if (!isLoading) {
      setAuthChecked(true);
    }
  }, [isLoading]);
  
  // Loading state - shown while auth is initializing or checking
  const loadingState = fallback || (
    <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <div className="w-16 h-16 border-4 border-t-blue-500 border-b-blue-700 rounded-full animate-spin mx-auto mb-4"></div>
        <p className="text-gray-600">Loading...</p>
      </div>
    </div>
  );

  // Handle loading state
  if (isLoading || !authChecked) {
    return loadingState;
  }
  
  // If not authenticated, show AccessDenied for login
  if (!user || !isAuthenticated) {
    return (
      <AccessDenied
        isAuthenticated={false}
        requiredRoles={requiredRoles}
        message={customMessages?.unauthenticated}
        loginPath={loginPath} 
        homePath={homePath}
      />
    );
  }
  
  // Check permissions for authenticated users
  if (requiredRoles.length > 0) {
    const hasAccess = requiredRoles.some(role => hasRole(role));
    if (!hasAccess) {
      return (
        <AccessDenied
          isAuthenticated={true}
          requiredRoles={requiredRoles}
          message={customMessages?.unauthorized}
          loginPath={loginPath}
          homePath={homePath}
        />
      );
    }
  }
  
  // At this point, the user is authenticated and has required permissions
  return <>{children}</>;
}
