import { create } from 'zustand';
import { activityService } from '@/lib/api/services';

export interface Activity {
  id: string;
  title: string;
  description: string;
  price: number;
  mediaUrls: string[];
  city: { name: string; id: string };
  country: { name: string; id: string };
  activityType: { name: string; id: string };
  startDate: string | Date;
  endDate: string | Date;
  averageRating: number;
  totalReviews: number;
  hostName: string;
  durationMinutes: number;
}

export interface ActivityFilters {
  city: string;
  country: string;
  activityType: string;
  minPrice: string;
  maxPrice: string;
  sortBy: string;
  querySearch?: string;
  when?: string;
  numOfPeople?: string;
}

export interface PaginationState {
  currentPage: number;
  totalPages: number;
  pageSize: number;
  totalItems: number;
}

interface ActivitiesState {
  activities: Activity[];
  filters: ActivityFilters;
  isLoading: boolean;
  error: Error | null;
  pagination: PaginationState;
  fetchActivities: () => Promise<void>;
  applyFilters: (filters: ActivityFilters) => Promise<void>;
  setFilters: (filters: Partial<ActivityFilters>) => void;
  clearFilters: () => void;
  setPage: (page: number) => void;
  setPageSize: (size: number) => void;
}

export const useActivitiesStore = create<ActivitiesState>((set, get) => ({
  activities: [],
  filters: {
    city: "",
    country: "",
    activityType: "",
    minPrice: "",
    maxPrice: "",
    sortBy: "",
    querySearch: "",
    when: "",
    numOfPeople: "",
  },
  isLoading: false,
  error: null,
  pagination: {
    currentPage: 1,
    totalPages: 1,
    pageSize: 9, // Default page size
    totalItems: 0,
  },
  
  setFilters: (newFilters) => {
    set((state) => ({
      filters: { ...state.filters, ...newFilters },
      pagination: { ...state.pagination, currentPage: 1 } // Reset to first page when filters change
    }));
  },
  
  clearFilters: () => {
    set({
      filters: {
        city: "",
        country: "",
        activityType: "",
        minPrice: "",
        maxPrice: "",
        sortBy: "",
        querySearch: "",
        when: "",
        numOfPeople: "",
      },
      pagination: {
        ...get().pagination,
        currentPage: 1 // Reset to first page
      }
    });
    get().fetchActivities();
  },
  
  setPage: (page) => {
    set(state => ({
      pagination: { ...state.pagination, currentPage: page }
    }));
    get().fetchActivities();
  },
  
  setPageSize: (size) => {
    set(state => ({
      pagination: { ...state.pagination, pageSize: size, currentPage: 1 }
    }));
    get().fetchActivities();
  },
  
  fetchActivities: async () => {
    try {
      set({ isLoading: true });
      const { pagination } = get();
      const response = await activityService.getAll({
        page: pagination.currentPage,
        limit: pagination.pageSize
      });
      
      set({ 
        activities: response.activities, 
        pagination: {
          currentPage: response.currentPage,
          totalPages: response.totalPages,
          pageSize: response.pageSize,
          totalItems: response.totalItems
        },
        isLoading: false, 
        error: null 
      });
    } catch (error) {
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error : new Error('Failed to fetch activities') 
      });
    }
  },
  
  applyFilters: async () => {
    try {
      const { filters, pagination } = get();
      set({ isLoading: true });
      
      const response = await activityService.getAll({
        city: filters.city || undefined,
        country: filters.country || undefined,
        activityType: filters.activityType || undefined,
        minPrice: filters.minPrice ? Number(filters.minPrice) : undefined,
        maxPrice: filters.maxPrice ? Number(filters.maxPrice) : undefined,
        sortBy: filters.sortBy || undefined,
        querySearch: filters.querySearch || undefined,
        when: filters.when || undefined,
        numOfPeople: filters.numOfPeople || undefined,
        page: pagination.currentPage,
        limit: pagination.pageSize
      });
      
      set({ 
        activities: response.activities, 
        pagination: {
          currentPage: response.currentPage,
          totalPages: response.totalPages,
          pageSize: response.pageSize,
          totalItems: response.totalItems
        },
        isLoading: false, 
        error: null 
      });
    } catch (error) {
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error : new Error('Failed to fetch filtered activities') 
      });
    }
  },
}));
